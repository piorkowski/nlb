{% extends '@EasyAdmin/page/content.html.twig' %}

{% block content_title %}
    Wprowadź wyniki - Dwumecz
{% endblock %}

{% block main %}
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header bg-primary text-white">
                    <h3 class="mb-0">
                        <i class="fa fa-bowling-ball"></i>
                        Mecz: {{ frame.game }}
                    </h3>
                    <p class="mb-0 mt-2">
                        {{ frame.game.gameDate|date('d.m.Y H:i') }}
                    </p>
                </div>
                <div class="card-body">
                    <form method="post" action="{{ path('admin_frame_save_all_scores_match', {gameId: frame.game.id}) }}" id="scoreForm">

                        {% set game1Frames = [] %}
                        {% set game2Frames = [] %}
                        {% for f in frame.game.frames %}
                            {% if f.gameNumber == 1 %}
                                {% set game1Frames = game1Frames|merge([f]) %}
                            {% elseif f.gameNumber == 2 %}
                                {% set game2Frames = game2Frames|merge([f]) %}
                            {% endif %}
                        {% endfor %}

                        {% set firstFrame = frame.game.frames|first %}
                        {% set allPlayersA = firstFrame.teamAPlayers %}
                        {% set allPlayersB = firstFrame.teamBPlayers %}

                        <div class="row">
                            {# GRA 1 #}
                            <div class="col-lg-6 mb-4">
                                <div class="game-card">
                                    <h4 class="game-header bg-info">
                                        <i class="fa fa-gamepad"></i> Gra 1 - Tor {{ game1Frames|first ? game1Frames|first.laneNumber : '?' }}
                                    </h4>

                                    <div class="table-responsive">
                                        <table class="table table-bordered score-table">
                                            <thead>
                                            <tr>
                                                <th class="player-col">Gracz</th>
                                                {% for i in 1..10 %}
                                                    <th class="frame-col">{{ i }}</th>
                                                {% endfor %}
                                                <th class="total-col">∑</th>
                                            </tr>
                                            </thead>
                                            <tbody>
                                            {% for player in allPlayersA|merge(allPlayersB) %}
                                                <tr>
                                                    <td class="player-name">
                                                        <strong>{{ player.fullName }}</strong>
                                                    </td>

                                                    {% for currentFrame in game1Frames|sort((a, b) => a.frameNumber <=> b.frameNumber) %}
                                                        <td class="frame-cell">
                                                            {% set roll1 = currentFrame.getPlayerRoll(player, 1) %}
                                                            {% set roll2 = currentFrame.getPlayerRoll(player, 2) %}
                                                            {% set roll3 = currentFrame.getPlayerRoll(player, 3) %}

                                                            {# Stwórz wartość domyślną dla inputa #}
                                                            {% set defaultValue = '' %}
                                                            {% if roll1 %}
                                                                {% if roll1.pinsKnocked == 10 %}
                                                                    {% set defaultValue = 'X' %}
                                                                {% elseif roll2 and roll1.pinsKnocked + roll2.pinsKnocked == 10 %}
                                                                    {% set defaultValue = roll1.pinsKnocked ~ '/' %}
                                                                {% elseif roll2 %}
                                                                    {% set defaultValue = roll1.pinsKnocked ~ ',' ~ roll2.pinsKnocked %}
                                                                {% else %}
                                                                    {% set defaultValue = roll1.pinsKnocked %}
                                                                {% endif %}

                                                                {% if currentFrame.frameNumber == 10 and roll3 %}
                                                                    {% set defaultValue = defaultValue ~ ',' ~ (roll3.pinsKnocked == 10 ? 'X' : roll3.pinsKnocked) %}
                                                                {% endif %}
                                                            {% endif %}

                                                            <input
                                                                type="text"
                                                                name="game1[{{ currentFrame.id }}][{{ player.id }}]"
                                                                class="frame-input"
                                                                value="{{ defaultValue }}"
                                                                placeholder="{{ currentFrame.frameNumber == 10 ? 'X,X,X' : 'X lub 7,2' }}"
                                                                data-frame-id="{{ currentFrame.id }}"
                                                                data-player-id="{{ player.id }}"
                                                                data-frame-num="{{ currentFrame.frameNumber }}"
                                                                autocomplete="off"
                                                                maxlength="10"
                                                            >
                                                            <div class="score-display">
                                                                {% if roll1 or roll2 or roll3 %}
                                                                    {{ currentFrame.calculatePlayerScore(player) }}
                                                                {% else %}
                                                                    <span class="text-muted">-</span>
                                                                {% endif %}
                                                            </div>
                                                        </td>
                                                    {% endfor %}

                                                    <td class="total-cell">
                                                        <strong>
                                                            {% set total = 0 %}
                                                            {% for currentFrame in game1Frames %}
                                                                {% set total = total + currentFrame.calculatePlayerScore(player) %}
                                                            {% endfor %}
                                                            {{ total }}
                                                        </strong>
                                                    </td>
                                                </tr>
                                            {% endfor %}
                                            </tbody>
                                        </table>
                                    </div>
                                </div>
                            </div>

                            {# GRA 2 #}
                            <div class="col-lg-6 mb-4">
                                <div class="game-card">
                                    <h4 class="game-header bg-success">
                                        <i class="fa fa-gamepad"></i> Gra 2 - Tor {{ game2Frames|first ? game2Frames|first.laneNumber : '?' }}
                                    </h4>

                                    <div class="table-responsive">
                                        <table class="table table-bordered score-table">
                                            <thead>
                                            <tr>
                                                <th class="player-col">Gracz</th>
                                                {% for i in 1..10 %}
                                                    <th class="frame-col">{{ i }}</th>
                                                {% endfor %}
                                                <th class="total-col">∑</th>
                                            </tr>
                                            </thead>
                                            <tbody>
                                            {% for player in allPlayersA|merge(allPlayersB) %}
                                                <tr>
                                                    <td class="player-name">
                                                        <strong>{{ player.fullName }}</strong>
                                                    </td>

                                                    {% for currentFrame in game2Frames|sort((a, b) => a.frameNumber <=> b.frameNumber) %}
                                                        <td class="frame-cell">
                                                            {% set roll1 = currentFrame.getPlayerRoll(player, 1) %}
                                                            {% set roll2 = currentFrame.getPlayerRoll(player, 2) %}
                                                            {% set roll3 = currentFrame.getPlayerRoll(player, 3) %}

                                                            {% set defaultValue = '' %}
                                                            {% if roll1 %}
                                                                {% if roll1.pinsKnocked == 10 %}
                                                                    {% set defaultValue = 'X' %}
                                                                {% elseif roll2 and roll1.pinsKnocked + roll2.pinsKnocked == 10 %}
                                                                    {% set defaultValue = roll1.pinsKnocked ~ '/' %}
                                                                {% elseif roll2 %}
                                                                    {% set defaultValue = roll1.pinsKnocked ~ ',' ~ roll2.pinsKnocked %}
                                                                {% else %}
                                                                    {% set defaultValue = roll1.pinsKnocked %}
                                                                {% endif %}

                                                                {% if currentFrame.frameNumber == 10 and roll3 %}
                                                                    {% set defaultValue = defaultValue ~ ',' ~ (roll3.pinsKnocked == 10 ? 'X' : roll3.pinsKnocked) %}
                                                                {% endif %}
                                                            {% endif %}

                                                            <input
                                                                type="text"
                                                                name="game2[{{ currentFrame.id }}][{{ player.id }}]"
                                                                class="frame-input"
                                                                value="{{ defaultValue }}"
                                                                placeholder="{{ currentFrame.frameNumber == 10 ? 'X,X,X' : 'X lub 7,2' }}"
                                                                data-frame-id="{{ currentFrame.id }}"
                                                                data-player-id="{{ player.id }}"
                                                                data-frame-num="{{ currentFrame.frameNumber }}"
                                                                autocomplete="off"
                                                                maxlength="10"
                                                            >
                                                            <div class="score-display">
                                                                {% if roll1 or roll2 or roll3 %}
                                                                    {{ currentFrame.calculatePlayerScore(player) }}
                                                                {% else %}
                                                                    <span class="text-muted">-</span>
                                                                {% endif %}
                                                            </div>
                                                        </td>
                                                    {% endfor %}

                                                    <td class="total-cell">
                                                        <strong>
                                                            {% set total = 0 %}
                                                            {% for currentFrame in game2Frames %}
                                                                {% set total = total + currentFrame.calculatePlayerScore(player) %}
                                                            {% endfor %}
                                                            {{ total }}
                                                        </strong>
                                                    </td>
                                                </tr>
                                            {% endfor %}
                                            </tbody>
                                        </table>
                                    </div>
                                </div>
                            </div>
                        </div>

                        {# Wynik całkowity #}
                        <div class="card mb-4 result-card">
                            <div class="card-header bg-warning">
                                <h5 class="mb-0"><i class="fa fa-trophy"></i> Wynik całkowity</h5>
                            </div>
                            <div class="card-body">
                                <div class="row text-center">
                                    {% for player in allPlayersA|merge(allPlayersB) %}
                                        <div class="col">
                                            <h6>{{ player.fullName }}</h6>
                                            <h2 class="display-4">{{ frame.game.getPlayerTotalScore(player) }}</h2>
                                        </div>
                                    {% endfor %}
                                </div>
                            </div>
                        </div>

                        <input type="hidden" name="_token" value="{{ csrf_token('all_match_scores_' ~ frame.game.id) }}">

                        <div class="action-bar">
                            <button type="submit" class="btn btn-success btn-lg">
                                <i class="fa fa-save"></i> Zapisz dwumecz
                            </button>
                            <button type="button" class="btn btn-warning btn-lg" onclick="clearAll()">
                                <i class="fa fa-eraser"></i> Wyczyść
                            </button>
                            <a href="{{ ea_url().setAction('viewFrames').setController('App\\Controller\\Admin\\GameCrudController').setEntityId(frame.game.id) }}" class="btn btn-secondary btn-lg">
                                <i class="fa fa-arrow-left"></i> Powrót
                            </a>
                        </div>
                    </form>
                </div>
            </div>

            {# Instrukcje #}
            <div class="card mt-3 help-card">
                <div class="card-header">
                    <h6 class="mb-0"><i class="fa fa-question-circle"></i> Jak wpisywać wyniki?</h6>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-3">
                            <h6>Strike:</h6>
                            <code class="example">X</code>
                            <p class="small text-muted">10 kręgli w 1 rzucie</p>
                        </div>
                        <div class="col-md-3">
                            <h6>Spare:</h6>
                            <code class="example">7/</code>
                            <p class="small text-muted">10 kręgli w 2 rzutach</p>
                        </div>
                        <div class="col-md-3">
                            <h6>Zwykłe:</h6>
                            <code class="example">7,2</code> lub <code class="example">7 2</code>
                            <p class="small text-muted">Oddziel spacją lub przecinkiem</p>
                        </div>
                        <div class="col-md-3">
                            <h6>Pudło:</h6>
                            <code class="example">-</code> lub <code class="example">0</code>
                            <p class="small text-muted">0 kręgli</p>
                        </div>
                    </div>
                    <div class="alert alert-info mt-3 mb-0">
                        <strong>💡 Wskazówka:</strong> Wpisuj tak jak na papierze! Naciśnij <kbd>Enter</kbd> aby przejść do następnego pola.
                    </div>
                </div>
            </div>
        </div>
    </div>

    <style>
        .game-card {
            border: 2px solid #dee2e6;
            border-radius: 8px;
            overflow: hidden;
        }

        .game-header {
            color: white;
            padding: 1rem;
            margin: 0;
            text-align: center;
        }

        .score-table {
            margin-bottom: 0;
            font-size: 0.9rem;
        }

        .score-table th {
            background-color: #343a40;
            color: white;
            text-align: center;
            padding: 0.75rem 0.25rem;
            font-size: 0.85rem;
        }

        .player-col {
            min-width: 140px;
            background-color: #343a40 !important;
        }

        .frame-col {
            min-width: 70px;
            width: 70px;
        }

        .total-col {
            min-width: 60px;
            background-color: #ffc107 !important;
            color: #000 !important;
        }

        .player-name {
            padding: 1rem;
            background-color: #f8f9fa;
            font-weight: 600;
        }

        .frame-cell {
            padding: 0.5rem !important;
            text-align: center;
            vertical-align: top;
        }

        .frame-input {
            width: 100%;
            height: 40px;
            text-align: center;
            font-size: 1.1rem;
            font-weight: bold;
            border: 2px solid #dee2e6;
            border-radius: 4px;
            padding: 0.25rem;
            text-transform: uppercase;
            font-family: 'Courier New', monospace;
        }

        .frame-input:focus {
            border-color: #0d6efd;
            box-shadow: 0 0 0 0.2rem rgba(13, 110, 253, 0.25);
            outline: none;
        }

        .frame-input.valid {
            background-color: #d4edda;
            border-color: #28a745;
        }

        .frame-input.invalid {
            background-color: #f8d7da;
            border-color: #dc3545;
        }

        .frame-input:placeholder-shown {
            background-color: #fff8dc;
        }

        .score-display {
            margin-top: 0.25rem;
            font-size: 0.85rem;
            font-weight: bold;
            color: #495057;
        }

        .total-cell {
            background-color: #ffc107;
            text-align: center;
            vertical-align: middle;
            font-size: 1.2rem;
        }

        .result-card {
            border: 3px solid #ffc107;
        }

        .result-card .display-4 {
            font-size: 3rem;
            font-weight: bold;
            color: #0d6efd;
        }

        .action-bar {
            position: sticky;
            bottom: 0;
            background: white;
            padding: 1.5rem;
            border-top: 3px solid #0d6efd;
            box-shadow: 0 -4px 10px rgba(0,0,0,0.1);
            margin: -1rem -1rem 0 -1rem;
            display: flex;
            gap: 1rem;
            justify-content: center;
            flex-wrap: wrap;
        }

        .help-card code.example {
            display: inline-block;
            padding: 0.5rem 1rem;
            font-size: 1.2rem;
            background-color: #f8f9fa;
            border: 2px solid #dee2e6;
            border-radius: 4px;
            margin: 0.5rem 0;
        }

        tr:hover .frame-cell {
            background-color: #f0f8ff;
        }
    </style>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const inputs = document.querySelectorAll('.frame-input');

            inputs.forEach(input => {
                // Auto-format podczas wpisywania
                input.addEventListener('input', function() {
                    formatInput(this);
                    validateInput(this);
                });

                // Enter = następne pole
                input.addEventListener('keydown', function(e) {
                    if (e.key === 'Enter') {
                        e.preventDefault();
                        const allInputs = Array.from(document.querySelectorAll('.frame-input'));
                        const idx = allInputs.indexOf(this);
                        if (allInputs[idx + 1]) {
                            allInputs[idx + 1].focus();
                            allInputs[idx + 1].select();
                        }
                    }
                });

                // Auto-select
                input.addEventListener('focus', function() {
                    this.select();
                });

                // Waliduj przy wczytaniu
                if (input.value) {
                    validateInput(input);
                }
            });

            // Focus na pierwszym pustym
            const firstEmpty = document.querySelector('.frame-input[value=""]');
            if (firstEmpty) firstEmpty.focus();
        });

        function formatInput(input) {
            let val = input.value.toUpperCase().trim();

            // Zamień spacje na przecinki
            val = val.replace(/\s+/g, ',');

            // Usuń niepotrzebne znaki
            val = val.replace(/[^X0-9,\-\/]/g, '');

            input.value = val;
        }

        function validateInput(input) {
            const val = input.value.toUpperCase().trim();
            const frameNum = parseInt(input.dataset.frameNum);

            if (!val) {
                input.classList.remove('valid', 'invalid');
                return;
            }

            // Parsuj wartość
            const parsed = parseFrameInput(val, frameNum);

            if (parsed.error) {
                input.classList.remove('valid');
                input.classList.add('invalid');
                input.title = parsed.error;
            } else {
                input.classList.remove('invalid');
                input.classList.add('valid');
                input.title = 'OK: ' + JSON.stringify(parsed.rolls);
            }
        }

        function parseFrameInput(input, frameNumber) {
            input = input.toUpperCase().trim();

            // Strike
            if (input === 'X') {
                return { rolls: [10], error: null };
            }

            // Spare z pierwszym rzutem
            const spareMatch = input.match(/^(\d|-)\/$/);
            if (spareMatch) {
                const first = spareMatch[1] === '-' ? 0 : parseInt(spareMatch[1]);
                if (first > 9) {
                    return { error: 'Pierwszy rzut max 9 dla spare' };
                }
                return { rolls: [first, 10 - first], error: null };
            }

            // Pudło
            if (input === '-' || input === '0') {
                return { rolls: [0], error: null };
            }

            // Dwa lub trzy rzuty oddzielone przecinkiem
            const parts = input.split(',').map(p => p.trim());
            const rolls = [];

            for (let part of parts) {
                if (part === 'X') {
                    rolls.push(10);
                } else if (part === '-') {
                    rolls.push(0);
                } else if (/^\d+$/.test(part)) {
                    const num = parseInt(part);
                    if (num > 10) {
                        return { error: 'Maksymalnie 10 kręgli w rzucie' };
                    }
                    rolls.push(num);
                } else if (part.includes('/')) {
                    // Spare w środku (np. "X,5/" w 10 framie)
                    const spareMatch2 = part.match(/^(\d|-)\/$/);
                    if (spareMatch2) {
                        const first = spareMatch2[1] === '-' ? 0 : parseInt(spareMatch2[1]);
                        rolls.push(first, 10 - first);
                    } else {
                        return { error: 'Nieprawidłowy format spare' };
                    }
                } else {
                    return { error: 'Nieprawidłowy format: ' + part };
                }
            }

            // Walidacja liczby rzutów
            if (frameNumber === 10) {
                if (rolls.length < 2 || rolls.length > 3) {
                    return { error: 'Fram 10: 2-3 rzuty' };
                }
            } else {
                if (rolls.length > 2) {
                    return { error: 'Maksymalnie 2 rzuty (oprócz framu 10)' };
                }
                if (rolls.length === 2 && rolls[0] !== 10 && rolls[0] + rolls[1] > 10) {
                    return { error: 'Suma rzutów max 10' };
                }
            }

            return { rolls, error: null };
        }

        function clearAll() {
            if (confirm('Wyczyścić wszystkie wyniki?')) {
                document.querySelectorAll('.frame-input').forEach(input => {
                    input.value = '';
                    input.classList.remove('valid', 'invalid');
                });
                const first = document.querySelector('.frame-input');
                if (first) first.focus();
            }
        }

        // Przetwarzanie przed wysłaniem formularza
        document.getElementById('scoreForm').addEventListener('submit', function(e) {
            e.preventDefault();

            const formData = new FormData(this);
            const processedData = new FormData();

            // Kopiuj token
            processedData.append('_token', formData.get('_token'));

            // Przetwórz dane z game1 i game2
            ['game1', 'game2'].forEach(gameName => {
                for (let [key, value] of formData.entries()) {
                    if (key.startsWith(gameName + '[')) {
                        // Parsuj klucz: game1[frameId][playerId]
                        const match = key.match(/game\d\[(\d+)\]\[(\d+)\]/);
                        if (match) {
                            const frameId = match[1];
                            const playerId = match[2];
                            const frameNum = document.querySelector(`[name="${key}"]`).dataset.frameNum;

                            const parsed = parseFrameInput(value, parseInt(frameNum));

                            if (parsed.error) {
                                alert('Błąd w polu: ' + key + '\n' + parsed.error);
                                return false;
                            }

                            // Dodaj przetworzone rzuty
                            parsed.rolls.forEach((pins, idx) => {
                                const rollKey = `frames[${frameId}][${playerId}][roll${idx + 1}]`;
                                processedData.append(rollKey, pins);
                            });
                        }
                    }
                }
            });

            // Wyślij przetworzone dane
            const xhr = new XMLHttpRequest();
            xhr.open('POST', this.action);
            xhr.onload = function() {
                if (xhr.status === 200) {
                    window.location.reload();
                } else {
                    alert('Błąd zapisywania');
                }
            };
            xhr.send(processedData);
        });
    </script>
{% endblock %}
